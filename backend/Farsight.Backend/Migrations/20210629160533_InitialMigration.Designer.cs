// <auto-generated />
using System;
using Farsight.Backend.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Farsight.Backend.Migrations
{
    [DbContext(typeof(FarsightBackendDbContext))]
    [Migration("20210629160533_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Farsight.Backend.Models.Holding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PortfolioId")
                        .HasColumnType("uuid");

                    b.Property<string>("Ticker")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.ToTable("Holdings");
                });

            modelBuilder.Entity("Farsight.Backend.Models.Portfolio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("Farsight.Backend.Models.Trade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Fees")
                        .HasColumnType("numeric");

                    b.Property<Guid>("HoldingId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("tradeType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HoldingId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("Farsight.Backend.Models.Holding", b =>
                {
                    b.HasOne("Farsight.Backend.Models.Portfolio", "Portfolio")
                        .WithMany("Holdings")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("Farsight.Backend.Models.Trade", b =>
                {
                    b.HasOne("Farsight.Backend.Models.Holding", "Holding")
                        .WithMany("Trades")
                        .HasForeignKey("HoldingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Holding");
                });

            modelBuilder.Entity("Farsight.Backend.Models.Holding", b =>
                {
                    b.Navigation("Trades");
                });

            modelBuilder.Entity("Farsight.Backend.Models.Portfolio", b =>
                {
                    b.Navigation("Holdings");
                });
#pragma warning restore 612, 618
        }
    }
}
